/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    main: {
        tagName: 'main'
    },
    ytCorner: {
        tagName: 'div',
        attributes: {
            class: 'youtube-corner',
            id: 'youtube-corner'
        }
    },
    searchForm: {
        tagName: 'form',
        attributes: {
            class: 'youtube-search',
            id: 'youtube-search'
        },
        input: {
            tagName: 'input',
            attributes: {
                type: 'text',
                id: 'search-query',
                placeholder: 'enter your query here...'
            }
        },
        submit: {
            tagName: 'a',
            attributes: {
                href: '',
                id: 'search-btn',
                class: 'btn'
            },
            innerHTML: 'Search'
        }
    },
    ytWrapper: {
        tagName: 'div',
        attributes: {
            class: 'youtube-wrapper',
            id: 'youtube-wrapper'
        }
    },
    ytBlock: {
        tagName: 'div',
        attributes: {
            class: 'youtube-block'
        },
        results: {
            tagName: 'section',
            attributes: {
                class: 'youtube-row',
                id: 'youtube-section'
            }
        },
        pagination: {
            tagName: 'div',
            attributes: {
                class: 'youtube-pagination',
                id: 'pagination'
            }
        }
    },
    ytArticle: {
        tagName: 'article',
        attributes: {
            class: 'item search-result'
        },
        children: {
            header: {
                tagName: 'a',
                attributes: {
                    href: '',
                    target: '_blank',
                    class: 'video-href'
                },
                children: {
                    caption: {
                        tagName: 'h2',
                        attributes: {
                            class: 'heading'
                        }
                    },
                    thumb: {
                        tagName: 'img',
                        attributes: {
                            src: '',
                            alt: '',
                            class: 'thumbnail'
                        }
                    }
                }
            },
            description: {
                tagName: 'p',
                attributes: {
                    class: 'description'
                }
            },
            aside: {
                tagName: 'aside',
                attributes: {
                    class: 'aside'
                }
            },
            footer: {
                tagName: 'footer',
                children: {
                    author: {
                        tagName: 'p',
                        attributes: {
                            class: 'author'
                        }
                    }
                }
            }
        },
        calculatedWidth: 250
    },
    ytPagination: {
        tagName: 'div',
        attributes: {
            class: 'youtube-pagination',
            id: 'youtube-pagination'
        },
        list: {
            tagName: 'ul',
            item: {
                tagName: 'li',
                children: {
                    pageLink: {
                        tagName: 'a',
                        attributes: {
                            href: ''
                        }
                    }
                }
            }
        }
    },
    ytStat: {
        tagName: 'div',
        attributes: {
            class: 'youtube-stat clearfix'
        },
        children: {
            ytValue: {
                tagName: 'span',
                attributes: {
                    class: 'pull-right'
                }
            }
        }
    }
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _elementCreator = __webpack_require__(4);

var _elementCreator2 = _interopRequireDefault(_elementCreator);

var _elementConfig = __webpack_require__(0);

var _elementConfig2 = _interopRequireDefault(_elementConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    /**
     * Setup constant HTML of page
     * @param parent
     */
    setupYoutubeCarcass: function setupYoutubeCarcass(parent) {
        var mainBlock = _elementCreator2.default.createElement(_elementConfig2.default.main);
        var ytCorner = _elementCreator2.default.createElement(_elementConfig2.default.ytCorner);

        // Search form elements
        var searchForm = _elementCreator2.default.createElement(_elementConfig2.default.searchForm);
        var searchFormInput = _elementCreator2.default.createElement(_elementConfig2.default.searchForm.input);
        var searchFormSubmit = _elementCreator2.default.createElement(_elementConfig2.default.searchForm.submit);

        searchForm.appendChild(searchFormInput);
        searchForm.appendChild(searchFormSubmit);

        ytCorner.appendChild(searchForm);

        mainBlock.appendChild(ytCorner);
        parent.appendChild(mainBlock);
    },

    /**
     * Setup HTML of results section where results should be added
     * @param parent
     */
    appendResultsBlock: function appendResultsBlock(parent) {
        var ytWrapper = _elementCreator2.default.createElement(_elementConfig2.default.ytWrapper);
        var ytBlock = _elementCreator2.default.createElement(_elementConfig2.default.ytBlock);
        var ytBlockResults = _elementCreator2.default.createElement(_elementConfig2.default.ytBlock.results);
        var ytBlockPagination = _elementCreator2.default.createElement(_elementConfig2.default.ytBlock.pagination);

        ytBlock.appendChild(ytBlockResults);
        ytBlock.appendChild(ytBlockPagination);
        ytWrapper.appendChild(ytBlock);

        parent.appendChild(ytWrapper);
    },

    /**
     * Append new set of items to existing results block
     * @param items
     * @param statistics
     */
    appendResultItems: function appendResultItems(items, statistics) {
        var section = document.getElementById(_elementConfig2.default.ytBlock.results.attributes.id);

        items.map(function (item, idx) {
            var itemBlock = _elementCreator2.default.createResultItem(item, statistics[idx].statistics);
            section.appendChild(itemBlock);
        });

        var additionalWidth = _elementConfig2.default.ytArticle.calculatedWidth * items.length;
        document.querySelector('.' + _elementConfig2.default.ytBlock.results.attributes.class).style.width += additionalWidth + 'px';
    },

    /**
     * Returns count of items that can be viewed on current screen size
     * @returns {number}
     */
    getViewingElementsCount: function getViewingElementsCount() {
        var windowWidth = window.innerWidth;
        var itemWidth = _elementConfig2.default.ytArticle.calculatedWidth;

        return Math.max(Math.floor(windowWidth / itemWidth));
    }
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _youtubeComponent = __webpack_require__(6);

var _youtubeComponent2 = _interopRequireDefault(_youtubeComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.addEventListener('load', function () {
    _youtubeComponent2.default.init(document.body);
});

/***/ }),
/* 3 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _elementConfig = __webpack_require__(0);

var _elementConfig2 = _interopRequireDefault(_elementConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create element with specified tag name and attributes
 * @param options
 * @returns {Element}
 */
function createElement(options) {
    var element = document.createElement(options.tagName);

    if (options.attributes) {
        for (var att in options.attributes) {
            if (options.attributes.hasOwnProperty(att)) {
                element.setAttribute(att, options.attributes[att]);
            }
        }
    }

    if (options.innerHTML) {
        element.innerHTML = options.innerHTML;
    }

    return element;
}

/**
 * Create result item element with specified options and content
 * @param content
 * @param statistics
 * @returns {Element}
 */
function createResultItem(content, statistics) {
    var resBlock = createElement(_elementConfig2.default.ytArticle);

    for (var child in _elementConfig2.default.ytArticle.children) {
        if (_elementConfig2.default.ytArticle.children.hasOwnProperty(child)) {
            resBlock.appendChild(_recursiveChild(_elementConfig2.default.ytArticle.children[child]));
        }
    }

    _fillContent(resBlock, content);
    _fillStatistics(resBlock, statistics);

    return resBlock;
}

/**
 * Recursive fuction that looks into element's child nodes and append them to each parent element respectful
 * @param elementOptions
 * @returns {*|Element}
 */
function _recursiveChild(elementOptions) {
    var node = createElement(elementOptions);

    if (elementOptions.children) {
        for (var child in elementOptions.children) {
            if (elementOptions.children.hasOwnProperty(child)) {
                node.appendChild(_recursiveChild(elementOptions.children[child]));
            }
        }
    }

    return node;
}

/**
 * Fill element's fields according to youtube video description
 * @param element
 * @param content
 * @private
 */
function _fillContent(element, content) {
    var article = _elementConfig2.default.ytArticle.children;

    var href = 'https://youtu.be/' + content.id.videoId;

    element.querySelector('.' + article.header.attributes.class).setAttribute('href', href);

    element.querySelector('.' + article.header.children.caption.attributes.class).innerHTML = content.snippet.title;

    var thumb = element.querySelector('.' + article.header.children.thumb.attributes.class);

    thumb.setAttribute('src', content.snippet.thumbnails.high.url);
    thumb.setAttribute('alt', content.snippet.title);

    var published = new Date(content.snippet.publishedAt);
    var description = content.snippet.description + '<br><br>Published at ' + published.toDateString();

    element.querySelector('.' + article.description.attributes.class).innerHTML = description;

    element.querySelector('.' + article.footer.children.author.attributes.class).innerHTML = content.snippet.channelTitle;
}

/**
 * Fill element's statistics according to youtube video likes, watches and etc.
 * @param element
 * @param stat
 * @private
 */
function _fillStatistics(element, stat) {
    var statInnerHTML = {
        'Likes:': stat.likeCount,
        'Dislikes:': stat.dislikeCount,
        'Views:': stat.viewCount,
        'Comments:': stat.commentCount
    };

    _appendToStatContainer(element, statInnerHTML);
}

/**
 * Append $items to container $element
 * @param element
 * @param items
 * @private
 */
function _appendToStatContainer(element, items) {
    var statContainer = element.querySelector('.' + _elementConfig2.default.ytArticle.children.aside.attributes.class);

    var statElemOptions = _elementConfig2.default.ytStat;
    var statValueOptions = _elementConfig2.default.ytStat.children.ytValue;

    for (var stat in items) {
        statElemOptions.innerHTML = stat;
        statValueOptions.innerHTML = items[stat];

        var ytStat = createElement(statElemOptions);
        var ytValue = createElement(statValueOptions);

        ytStat.appendChild(ytValue);
        statContainer.appendChild(ytStat);
    }
}

exports.default = {
    createElement: createElement,
    createResultItem: createResultItem
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _carcass = __webpack_require__(1);

var _carcass2 = _interopRequireDefault(_carcass);

var _elementConfig = __webpack_require__(0);

var _elementConfig2 = _interopRequireDefault(_elementConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var youtubeAPI = {
    query: '',
    loadCount: 15,
    key: 'AIzaSyClJ0T0_hPm9mhkDgN5v3AmEZhDK4g7fNw',
    pageToken: ''
};

/**
 * Handle search button click
 * @param e
 * @param ytCorner
 * @param searchQueryContainer
 */
function searchClick(e, ytCorner, searchQueryContainer) {
    e.preventDefault();

    // Results block refresh
    var ytWrapper = document.getElementById(_elementConfig2.default.ytWrapper.attributes.id);

    if (!ytWrapper) {
        _carcass2.default.appendResultsBlock(ytCorner);
    } else {
        ytCorner.removeChild(ytWrapper);
        _carcass2.default.appendResultsBlock(ytCorner);
    }

    // Search logic
    youtubeAPI.query = searchQueryContainer.value;
    getYoutubeClips();

    searchQueryContainer.value = '';
}

/**
 * Helper function for XHR request send
 * @param method
 * @param url
 * @param callback
 */
function sendXHRRequest() {
    var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';
    var url = arguments[1];
    var callback = arguments[2];

    var xhr = new XMLHttpRequest();
    xhr.open(method, url, true);

    xhr.send();

    xhr.onreadystatechange = function () {
        if (xhr.readyState != 4) return;

        if (xhr.status != 200) {
            alert(xhr.status + ': ' + xhr.statusText);
        } else {
            callback(xhr);
        }
    };
}

/**
 * Appends a new set of youtube clips to results block
 */
function getYoutubeClips() {
    var method = 'GET';
    var url = 'https://www.googleapis.com/youtube/v3/search?key=' + youtubeAPI.key + '&pageToken=' + youtubeAPI.pageToken + '&type=video&part=snippet&maxResults=' + youtubeAPI.loadCount + '&q=' + youtubeAPI.query;

    sendXHRRequest(method, url, function (xhr) {
        var result = JSON.parse(xhr.responseText);
        youtubeAPI.pageToken = result.nextPageToken;

        _sendStatisticsRequest(result);
    });
}

function _sendStatisticsRequest(items) {
    var method = 'GET';
    var ids = _getItemsIds(items.items);
    var url = 'https://www.googleapis.com/youtube/v3/videos?part=contentDetails,statistics&id=' + ids.join() + '&key=' + youtubeAPI.key;

    sendXHRRequest(method, url, function (xhr) {
        _settleYoutubeClips(items, JSON.parse(xhr.responseText));
    });
}

function _getItemsIds(items) {
    return items.map(function (cur) {
        return cur.id.videoId;
    }, []);
}

function _settleYoutubeClips(items, statistics) {
    _carcass2.default.appendResultItems(items.items, statistics.items);
}

exports.default = {
    /**
     * Initialize search component and it's logic on page
     */
    init: function init() {
        var ytCorner = document.getElementById(_elementConfig2.default.ytCorner.attributes.id);
        var form = document.getElementById(_elementConfig2.default.searchForm.attributes.id);
        var searchButton = document.getElementById(_elementConfig2.default.searchForm.submit.attributes.id);
        var searchQueryContainer = document.getElementById(_elementConfig2.default.searchForm.input.attributes.id);

        form.onsubmit = function (e) {
            searchClick(e, ytCorner, searchQueryContainer);
        };

        searchButton.addEventListener('click', function (e) {
            searchClick(e, ytCorner, searchQueryContainer);
        });
    }
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _carcass = __webpack_require__(1);

var _carcass2 = _interopRequireDefault(_carcass);

var _searchComponent = __webpack_require__(5);

var _searchComponent2 = _interopRequireDefault(_searchComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    init: function init(container) {
        _carcass2.default.setupYoutubeCarcass(container);
        _searchComponent2.default.init();
    }
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);
module.exports = __webpack_require__(3);


/***/ })
/******/ ]);